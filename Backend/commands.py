from telegram import ForceReply, Update, constants, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext
import database
import json
import parsers
import utils
import reports
import io
from datetime import date

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞—Ç—ã"""
    try:
        database.getGroup(update.message.chat_id)
        data = parsers.ParsedQuery(update.message)
        debs = json.dumps(data.debters)
        notFilled = utils.checkCostState(debs)
        completed = len(notFilled) == 0
        message = '–ó–∞–ø–æ–º–Ω–∏–ªüç∂'
        if not completed:
            message += ' –∂–¥–µ–º' + ' @'.join([''] + notFilled)
        else:
            debs = utils.setDebtersFinalValues(data.debters, data.amount)
        rep = await update.message.reply_text(message, reply_markup=getCancelMarkup())
        database.insertCost(rep.id, update.message.chat_id, completed, update.message.from_user.username, data.amount, debs, data.desc)
        if completed:
            await post_cost_completed(rep.id, update)
    except:
        await update.message.set_reaction(constants.ReactionEmoji.CRYING_FACE)

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞"""
    group = database.getGroup(update.message.chat_id)
    cost = database.getCost(group['id'], update.message.reply_to_message.id)
    username = update.message.from_user.username
    debs = json.loads(cost['debtors'])
    try:
        answer = utils.calculations.parse_expression(update.message.text)
        if answer[0] < 0 or answer[0] > cost['costAmount']:
            raise
    except:
        await update.message.set_reaction(constants.ReactionEmoji.CLOWN_FACE)
        return
    debs[username] = update.message.text
    debs = json.dumps(debs)
    notFilled = utils.checkCostState(debs)
    completed = len(notFilled) == 0
    if completed:
        try:
            debs = utils.setDebtersFinalValues(json.loads(debs), cost['costAmount'])
        except:
            await update.message.set_reaction(constants.ReactionEmoji.CRYING_FACE)
            return
    database.updateCost(group['id'], update.message.reply_to_message.id, completed, debs)
    await update.message.set_reaction(constants.ReactionEmoji.FIRE if completed else constants.ReactionEmoji.THUMBS_UP)
    if completed:
        await post_cost_completed(update.message.reply_to_message.id, update)

async def post_cost_completed(messageId, update: Update):
    pass

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ç—Ä–∞—Ç"""
    group = database.getGroup(update.message.chat_id)
    spendings = database.getSpendings(group['id'])
    uncompletedSpending = utils.getUncompletedSpending(spendings)
    if uncompletedSpending != None:
        notFilled = utils.checkCostState(uncompletedSpending['debtors'])
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–∞—Ç—É'+' @'.join(['']+notFilled), reply_to_message_id=uncompletedSpending['messageId'])
        return
    try:
        spendings = utils.convertSpendingsToReportDto(spendings)
        report = reports.generateReport(spendings)
        transactions = reports.calculateTransactions(report['balances'])
        answer = ''
        if len(transactions) > 0:
            for transaction in transactions:
                answer += f'{transaction["from"]} ‚û°Ô∏è {transaction["to"]} {round(transaction["amount"], 2)}üé™\n'
            await update.message.reply_text(answer, reply_markup=getCsvReportMarkup())
        else:
            await update.message.reply_text('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç')
    except Exception as e:
        await update.message.reply_text('‚ö†Ô∏è ' + str(e))
        raise e
    
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞—Ç"""
    group = database.getGroup(update.message.chat_id)
    costs = database.getSpendings(group['id'])
    users = ",".join(set(map(lambda x: x['telegramFromId'], costs)))
    if not users:
        database.removeCosts(update.message.chat_id)
    else:
        await update.message.reply_text(users, reply_markup=getResetMarkup())

async def report_csv_callback(update: Update, ctx: CallbackContext) -> None:
    query = update.callback_query
    group = database.getGroup(query.message.chat_id)
    spendings = database.getSpendings(group['id'])
    spendings = utils.convertSpendingsToReportDto(spendings)
    doc = reports.generateCsv(spendings)
    await query.message.reply_document(document=doc, caption='–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ üìà @' + query.from_user.username)
    await query.answer()

async def cancel_callback(update: Update, ctx: CallbackContext) -> None:
    query = update.callback_query
    chat = query.message.chat.id
    message = query.message.message_id
    cost = database.getCost(chat, message)
    if query.from_user.username == cost['telegramFromId']:
        database.removeCost(chat, message)
        await query.message.delete()
    await query.answer()

async def reset_callback(update: Update, ctx: CallbackContext) -> None:
    query = update.callback_query
    fromUser = query.from_user.username
    chat = query.message.chat.id
    message = query.message.text
    users = message.split(",")
    await query.answer()
    users.remove(fromUser)
    if not users:
        database.removeCosts(chat)
        await query.message.edit_text("–¢—Ä–∞—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ãüí®")
        return
    users = ",".join(users)
    await query.message.edit_text(users, reply_markup=getResetMarkup())

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = """
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–∞—Ç

* —Ç–æ—Ç –∫—Ç–æ –ø–ª–∞—Ç–∏–ª –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É add (—É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–µ –≤ —Ç–≥ –ø–∞–ª—å—Ü–µ–º) –∏ –ø–∏—à–µ—Ç —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –ø–æ—Ç—Ä–∞—Ç–∏–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ø–æ—Ç–æ–º —Ç—ç–≥–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ —á–µ–ª–∞ –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–∏—à–µ—Ç —Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ—Ç—Ä–∞—Ç–∏–ª.
* –∞ –µ—â–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥—Ä–æ—Ç—Å—Ç–≤–∞, –ø–æ—ç—Ç–æ–º—É –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∫—Ç–æ —Å–∫–æ–∫–∞ –ø–æ—Ç—Ä–∞—Ç–∏–ª –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –∞ —Ü–µ–ª–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 100+50/2), –∏ –¥–∞–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x,
–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π —Ç—Ä–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –ø–∏–ª–∏ –æ–±—â–∏–π —á–∞–π, —Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ —Ç–∏–ø–∞ –ê—Ä—Ç–µ–º –ø–æ—Ç—Ä–∞—Ç–∏–ª 300+x, –≥–¥–µ 300 –µ–≥–æ –ª–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã, –∞ x —ç—Ç–æ —á—Ç–æ—Ç–æ –æ–±—â–µ–µ).
–≤—Å–µ —Å—Ç—Ä–æ—á–∫–∏ –≤ add –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ç—ç–≥–∞ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "–∑–∞ –ø–æ–Ω—á–∏–∫–∏").
* –Ω—É –∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ —Ç—Ä–∞—Ç—ã –º–æ–∂–Ω–æ –¥–µ—Ä–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É report –∏ –æ–Ω–∞ –≤—ã–ø–ª—é–Ω–µ—Ç –∫—Ç–æ —Å–∫–æ–∫–∞ –∫–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–∞–±–æ–∫.
* –∞ –∫–æ–º–∞–Ω–¥–∞ reset (–Ω—É –æ—á–µ–Ω—å –æ–ø–∞—Å–Ω–∞—è) —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–∞—Ç—ã –∏ –∏—Ö –ø—Ä–∏–¥–µ—Ü–∞ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞–Ω–æ–≤–æ

–ø—Ä–∏–º–µ—Ä:
/add@kefirchik42_bot 1500
@x64BitWorm 500+x
@Artem_Barsov 300+x
@Grisha_Barsov 100
@Random_Name_0 100
"""
    await update.message.reply_text(message)

def getCsvReportMarkup():
    return InlineKeyboardMarkup([[InlineKeyboardButton('–û—Ç—á–µ—Ç.csv', callback_data="report-csv")]])

def getCancelMarkup():
    return InlineKeyboardMarkup([[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel-send')]])

def getResetMarkup():
    return InlineKeyboardMarkup([[InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–±—Ä–æ—Å', callback_data='reset-costs')]])
